package com.umb.cs682.projectlupus.db.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.umb.cs682.projectlupus.domain.MedicineIntakeBO;
import com.umb.cs682.projectlupus.db.helpers.DaoSession;
import com.umb.cs682.projectlupus.domain.MedicineIntakeBO;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MEDICINE_INTAKE.
*/
public class MedicineIntakeDao extends AbstractDao<MedicineIntakeBO, Long> {

    public static final String TABLENAME = "MEDICINE_INTAKE";

    /**
     * Properties of entity MedicineIntake.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ReminderId = new Property(1, long.class, "reminderId", false, "REMINDER_ID");
        public final static Property RemindedCount = new Property(2, Integer.class, "remindedCount", false, "REMINDED_COUNT");
        public final static Property IntakeCount = new Property(3, Integer.class, "intakeCount", false, "INTAKE_COUNT");
    };

    private Query<MedicineIntakeBO> reminder_MedIntakeCountQuery;

    public MedicineIntakeDao(DaoConfig config) {
        super(config);
    }
    
    public MedicineIntakeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MEDICINE_INTAKE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'REMINDER_ID' INTEGER NOT NULL ," + // 1: reminderId
                "'REMINDED_COUNT' INTEGER," + // 2: remindedCount
                "'INTAKE_COUNT' INTEGER);"); // 3: intakeCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MEDICINE_INTAKE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MedicineIntakeBO entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getReminderId());
 
        Integer remindedCount = entity.getRemindedCount();
        if (remindedCount != null) {
            stmt.bindLong(3, remindedCount);
        }
 
        Integer intakeCount = entity.getIntakeCount();
        if (intakeCount != null) {
            stmt.bindLong(4, intakeCount);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MedicineIntakeBO readEntity(Cursor cursor, int offset) {
        MedicineIntakeBO entity = new MedicineIntakeBO( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // reminderId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // remindedCount
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3) // intakeCount
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MedicineIntakeBO entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setReminderId(cursor.getLong(offset + 1));
        entity.setRemindedCount(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setIntakeCount(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MedicineIntakeBO entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MedicineIntakeBO entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "medIntakeCount" to-many relationship of Reminder. */
    public List<MedicineIntakeBO> _queryReminder_MedIntakeCount(long reminderId) {
        synchronized (this) {
            if (reminder_MedIntakeCountQuery == null) {
                QueryBuilder<MedicineIntakeBO> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ReminderId.eq(null));
                reminder_MedIntakeCountQuery = queryBuilder.build();
            }
        }
        Query<MedicineIntakeBO> query = reminder_MedIntakeCountQuery.forCurrentThread();
        query.setParameter(0, reminderId);
        return query.list();
    }

}
