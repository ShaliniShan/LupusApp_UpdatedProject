package com.umb.cs682.projectlupus.domain;

import java.util.List;

import com.umb.cs682.projectlupus.db.dao.MoodLevelDao;
import com.umb.cs682.projectlupus.db.dao.ReminderDao;
import com.umb.cs682.projectlupus.db.helpers.DaoSession;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table REMINDER.
 */
public class Reminder {

    private Long id;
    private Integer typeId;
    private long medId;
    private String reminderName;
    /** Not-null value. */
    private java.util.Date reminderTime;
    /** Not-null value. */
    private String status;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ReminderDao myDao;

    private List<MoodLevel> moodReminders;

    public Reminder() {
    }

    public Reminder(Long id) {
        this.id = id;
    }

    public Reminder(Long id, Integer typeId, long medId, String reminderName, java.util.Date reminderTime, String status) {
        this.id = id;
        this.typeId = typeId;
        this.medId = medId;
        this.reminderName = reminderName;
        this.reminderTime = reminderTime;
        this.status = status;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getReminderDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getTypeId() {
        return typeId;
    }

    public void setTypeId(Integer typeId) {
        this.typeId = typeId;
    }

    public long getMedId() {
        return medId;
    }

    public void setMedId(long medId) {
        this.medId = medId;
    }

    public String getReminderName() {
        return reminderName;
    }

    public void setReminderName(String reminderName) {
        this.reminderName = reminderName;
    }

    /** Not-null value. */
    public java.util.Date getReminderTime() {
        return reminderTime;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setReminderTime(java.util.Date reminderTime) {
        this.reminderTime = reminderTime;
    }

    /** Not-null value. */
    public String getStatus() {
        return status;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setStatus(String status) {
        this.status = status;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<MoodLevel> getMoodReminders() {
        if (moodReminders == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MoodLevelDao targetDao = daoSession.getMoodLevelDao();
            List<MoodLevel> moodRemindersNew = targetDao._queryReminder_MoodReminders(id);
            synchronized (this) {
                if(moodReminders == null) {
                    moodReminders = moodRemindersNew;
                }
            }
        }
        return moodReminders;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMoodReminders() {
        moodReminders = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
